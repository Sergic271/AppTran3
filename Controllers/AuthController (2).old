// Controllers/AuthController.cs
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

public class AuthController : Controller
{
    private readonly IUserService _userService;
    private readonly ILogger<AuthController> _logger;

    public AuthController(
        IUserService userService,
        ILogger<AuthController> logger)
    {
        _userService = userService;
        _logger = logger;
    }

    public async Task<IActionResult> Login()
    {
        // Get Windows identity
        var windowsIdentity = System.Security.Principal.WindowsIdentity.GetCurrent();
        if (windowsIdentity == null)
        {
            _logger.LogWarning("Windows identity is null");
            return View("AccessDenied");
        }

        string domainUsername = windowsIdentity.Name;
        _logger.LogInformation($"Login attempt with Windows identity: {domainUsername}");
        
        var user = _userService.AuthenticateUser(domainUsername);
        
        if (user == null)
        {
            _logger.LogWarning($"Authentication failed for {domainUsername}");
            return View("AccessDenied");
        }

        _logger.LogInformation($"Authenticated user: {user.FullName}, Role: {user.Role}");

        // Set authentication cookie with claims
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.FullName),
            new Claim(ClaimTypes.Role, user.Role),
            new Claim("DomainUsername", user.DomainUsername)
        };
        
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
            new ClaimsPrincipal(identity));

        return RedirectToAction("Index", "Home");
    }

    public async Task<IActionResult> Logout()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        return RedirectToAction("Login");
    }

    public IActionResult AccessDenied()
    {
        return View();
    }
}